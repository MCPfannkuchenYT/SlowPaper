From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pfannekuchen <gamesupport@mgnet.work>
Date: Tue, 19 Oct 2021 14:45:05 +0200
Subject: [PATCH] Updating the Eating Progress


diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 1149a15486016ac101c5976b45b7d1c1109244ce..f4f92accdd1a86db77e9fbe76034a47358b59f67 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3539,11 +3539,6 @@ public abstract class LivingEntity extends Entity {
         return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
     }
 
-    // Paper start - lag compensate eating
-    protected long eatStartTime;
-    protected int totalEatTimeTicks;
-    // Paper end
-
     private void updatingUsingItem() {
         if (this.isUsingItem()) {
             if (ItemStack.isSameIgnoreDurability(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
@@ -3561,12 +3556,7 @@ public abstract class LivingEntity extends Entity {
         if (this.shouldTriggerItemUseEffects()) {
             this.triggerItemUseEffects(stack, 5);
         }
-        // Paper start - lag compensate eating
-        // we add 1 to the expected time to avoid lag compensating when we should not
-        boolean shouldLagCompensate = this.useItem.getItem().isEdible() && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((1 + this.totalEatTimeTicks) * 50 * (1000 * 1000));
-        if ((--this.useItemRemaining == 0 || shouldLagCompensate) && !this.level.isClientSide && !this.useItem.useOnRelease()) {
-            this.useItemRemaining = 0;
-            // Paper end
+        if (--this.useItemRemaining == 0 && !this.level.isClientSide && !stack.useOnRelease()) {
             this.completeUsingItem();
         }
 
@@ -3612,10 +3602,7 @@ public abstract class LivingEntity extends Entity {
 
         if (!itemstack.isEmpty() && !this.isUsingItem() || forceUpdate) { // Paper use override flag
             this.useItem = itemstack;
-            // Paper start - lag compensate eating
-            this.useItemRemaining = this.totalEatTimeTicks = itemstack.getUseDuration();
-            this.eatStartTime = System.nanoTime();
-            // Paper end
+            this.useItemRemaining = itemstack.getUseDuration();
             if (!this.level.isClientSide) {
                 this.setLivingEntityFlag(1, true);
                 this.setLivingEntityFlag(2, enumhand == InteractionHand.OFF_HAND);
@@ -3639,10 +3626,7 @@ public abstract class LivingEntity extends Entity {
                 }
             } else if (!this.isUsingItem() && !this.useItem.isEmpty()) {
                 this.useItem = ItemStack.EMPTY;
-                // Paper start - lag compensate eating
-                this.useItemRemaining = this.totalEatTimeTicks = 0;
-                this.eatStartTime = -1L;
-                // Paper end
+                this.useItemRemaining = 0;
             }
         }
 
@@ -3769,10 +3753,7 @@ public abstract class LivingEntity extends Entity {
         }
 
         this.useItem = ItemStack.EMPTY;
-        // Paper start - lag compensate eating
-        this.useItemRemaining = this.totalEatTimeTicks = 0;
-        this.eatStartTime = -1L;
-        // Paper end
+        this.useItemRemaining = 0;
     }
 
     public boolean isBlocking() {
