From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pfannekuchen <gamesupport@mgnet.work>
Date: Tue, 19 Oct 2021 14:54:22 +0200
Subject: [PATCH] Don't compensate for lag :D


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index f421e6a2e43e0a673dbb8a9a2b4331387e523e02..b0ed9acdaa9dab0060bc477a186ec406f0b5ad33 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -643,12 +643,6 @@ public class PaperConfig {
         }
     }
 
-    public static boolean lagCompensateBlockBreaking;
-
-    private static void lagCompensateBlockBreaking() {
-        lagCompensateBlockBreaking = getBoolean("settings.lag-compensate-block-breaking", true);
-    }
-
     public static boolean sendFullPosForHardCollidingEntities;
 
     private static void sendFullPosForHardCollidingEntities() {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 12998d0e9ae0e148a155faa4468b0f78b8462cc9..35d05cc4bddea5b168a6498add1de9bcbdbfc1cb 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -56,28 +56,14 @@ public class ServerPlayerGameMode {
     @Nullable
     private GameType previousGameModeForPlayer;
     private boolean isDestroyingBlock;
-    private int destroyProgressStart; private long lastDigTime; // Paper - lag compensate block breaking
+    private int destroyProgressStart;
     private BlockPos destroyPos;
     private int gameTicks;
     private boolean hasDelayedDestroy;
     private BlockPos delayedDestroyPos;
-    private int delayedTickStart; private long hasDestroyedTooFastStartTime; // Paper - lag compensate block breaking
+    private int delayedTickStart;
     private int lastSentState;
 
-    // Paper start - lag compensate block breaking
-    private int getTimeDiggingLagCompensate() {
-        int lagCompensated = (int)((System.nanoTime() - this.lastDigTime) / (50L * 1000L * 1000L));
-        int tickDiff = this.gameTicks - this.destroyProgressStart;
-        return (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking && lagCompensated > (tickDiff + 1)) ? lagCompensated : tickDiff; // add one to ensure we don't lag compensate unless we need to
-    }
-
-    private int getTimeDiggingTooFastLagCompensate() {
-        int lagCompensated = (int)((System.nanoTime() - this.hasDestroyedTooFastStartTime) / (50L * 1000L * 1000L));
-        int tickDiff = this.gameTicks - this.delayedTickStart;
-        return (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking && lagCompensated > (tickDiff + 1)) ? lagCompensated : tickDiff; // add one to ensure we don't lag compensate unless we need to
-    }
-    // Paper end
-
     public ServerPlayerGameMode(ServerPlayer player) {
         this.gameModeForPlayer = GameType.DEFAULT_MODE;
         this.destroyPos = BlockPos.ZERO;
@@ -144,7 +130,7 @@ public class ServerPlayerGameMode {
             if (iblockdata == null || iblockdata.isAir()) { // Paper
                 this.hasDelayedDestroy = false;
             } else {
-                float f = this.updateBlockBreakAnimation(iblockdata, this.delayedDestroyPos, this.getTimeDiggingTooFastLagCompensate()); // Paper - lag compensate destroying blocks
+                float f = this.incrementDestroyProgress(iblockdata, this.delayedDestroyPos, this.delayedTickStart);
 
                 if (f >= 1.0F) {
                     this.hasDelayedDestroy = false;
@@ -164,7 +150,7 @@ public class ServerPlayerGameMode {
                 this.lastSentState = -1;
                 this.isDestroyingBlock = false;
             } else {
-                this.updateBlockBreakAnimation(iblockdata, this.destroyPos, this.getTimeDiggingLagCompensate()); // Paper - lag compensate destroying
+                this.incrementDestroyProgress(iblockdata, this.destroyPos, this.destroyProgressStart);
             }
         }
 
@@ -172,12 +158,6 @@ public class ServerPlayerGameMode {
 
     private float incrementDestroyProgress(BlockState state, BlockPos pos, int i) {
         int j = this.gameTicks - i;
-        // Paper start - change i (startTime) to totalTime
-        return this.updateBlockBreakAnimation(state, pos, j);
-    }
-    private float updateBlockBreakAnimation(BlockState state, BlockPos pos, int totalTime) {
-        int j = totalTime;
-        // Paper end
         float f = state.getDestroyProgress(this.player, this.player.level, pos) * (float) (j + 1);
         int k = (int) (f * 10.0F);
 
@@ -246,7 +226,7 @@ public class ServerPlayerGameMode {
                     return;
                 }
 
-                this.destroyProgressStart = this.gameTicks; this.lastDigTime = System.nanoTime(); // Paper - lag compensate block breaking
+                this.destroyProgressStart = this.gameTicks;
                 float f = 1.0F;
 
                 iblockdata = this.level.getBlockState(pos);
@@ -299,12 +279,12 @@ public class ServerPlayerGameMode {
                     int j = (int) (f * 10.0F);
 
                     this.level.destroyBlockProgress(this.player.getId(), pos, j);
-                    if (!com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking) this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, "actual start of destroying"));
+                    this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, "actual start of destroying"));
                     this.lastSentState = j;
                 }
             } else if (action == ServerboundPlayerActionPacket.Action.STOP_DESTROY_BLOCK) {
                 if (pos.equals(this.destroyPos)) {
-                    int k = this.getTimeDiggingLagCompensate(); // Paper - lag compensate block breaking
+                    int k = this.gameTicks - this.destroyProgressStart;
 
                     iblockdata = this.level.getBlockState(pos);
                     if (!iblockdata.isAir()) {
@@ -321,18 +301,12 @@ public class ServerPlayerGameMode {
                             this.isDestroyingBlock = false;
                             this.hasDelayedDestroy = true;
                             this.delayedDestroyPos = pos;
-                            this.delayedTickStart = this.destroyProgressStart; this.hasDestroyedTooFastStartTime = this.lastDigTime; // Paper - lag compensate block breaking
+                            this.delayedTickStart = this.destroyProgressStart;
                         }
                     }
                 }
 
-                // Paper start - this can cause clients on a lagging server to think they're not currently destroying a block
-                if (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking) {
-                    this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, pos));
-                } else {
                 this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, "stopped destroying"));
-                }
-                // Paper end - this can cause clients on a lagging server to think they're not currently destroying a block
             } else if (action == ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK) {
                 this.isDestroyingBlock = false;
                 if (!Objects.equals(this.destroyPos, pos) && !BlockPos.ZERO.equals(this.destroyPos)) {
@@ -344,7 +318,7 @@ public class ServerPlayerGameMode {
                 }
 
                 this.level.destroyBlockProgress(this.player.getId(), pos, -1);
-                if (!com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking) this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, "aborted destroying")); // Paper - this can cause clients on a lagging server to think they stopped destroying a block they're currently destroying
+                this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, "aborted destroying"));
             }
 
         }
@@ -354,13 +328,7 @@ public class ServerPlayerGameMode {
 
     public void destroyAndAck(BlockPos pos, ServerboundPlayerActionPacket.Action action, String reason) {
         if (this.destroyBlock(pos)) {
-            // Paper start - this can cause clients on a lagging server to think they're not currently destroying a block
-            if (com.destroystokyo.paper.PaperConfig.lagCompensateBlockBreaking) {
-                this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, pos));
-            } else {
             this.player.connection.send(new ClientboundBlockBreakAckPacket(pos, this.level.getBlockState(pos), action, true, reason));
-            }
-            // Paper end - this can cause clients on a lagging server to think they're not currently destroying a block
         } else {
             this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, pos)); // CraftBukkit - SPIGOT-5196
         }
